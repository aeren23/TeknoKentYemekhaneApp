<!-- CalendarComponent.razor -->
<!-- This component displays a responsive calendar with customizable day boxes. -->
@page "/calendar"


@using System
@using System.Globalization

<div class="calendar-container bg-white shadow-xl rounded-xl p-6 md:p-8 w-full max-w-md lg:max-w-xl">
    <!-- Calendar Header -->
    <div class="calendar-header flex justify-between items-center mb-6">
        <button @onclick="GoToPreviousMonth"
                class="p-2 bg-blue-500 hover:bg-blue-600 text-white rounded-full transition duration-300 ease-in-out shadow-md focus:outline-none focus:ring-2 focus:ring-blue-400">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
        </button>
        <h2 class="text-2xl font-bold text-gray-800 tracking-wide">@CurrentDate.ToString("MMMM yyyy", CultureInfo.InvariantCulture)</h2>
        <button @onclick="GoToNextMonth"
                class="p-2 bg-blue-500 hover:bg-blue-600 text-white rounded-full transition duration-300 ease-in-out shadow-md focus:outline-none focus:ring-2 focus:ring-blue-400">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
        </button>
    </div>

    <!-- Days of the Week -->
    <div class="days-of-week grid grid-cols-7 text-center text-sm font-medium text-gray-500 uppercase mb-4">
        <div class="py-2">Sun</div>
        <div class="py-2">Mon</div>
        <div class="py-2">Tue</div>
        <div class="py-2">Wed</div>
        <div class="py-2">Thu</div>
        <div class="py-2">Fri</div>
        <div class="py-2">Sat</div>
    </div>

    <!-- Calendar Grid -->
    <div class="grid grid-cols-7 gap-2">
        @foreach (var day in CalendarDays)
        {
            <div @onclick="() => HandleDayClick(day)"
                 class="@GetDayBoxClasses(day)">

                @if (day != DateTime.MinValue)
                {
                    <!-- Day number -->
                    <span class="font-semibold text-lg absolute top-1 right-2">@day.Day</span>

                    <!-- Placeholder for names (if any) -->
                    <div class="mt-6 w-full text-xs text-gray-600 flex flex-col items-center overflow-y-auto custom-scrollbar">
                        @if (DayNames.ContainsKey(day.ToString("yyyy-MM-dd")))
                        {
                            @foreach (var name in DayNames[day.ToString("yyyy-MM-dd")])
                            {
                                <span class="bg-green-100 text-green-800 px-1 py-0.5 rounded-full mb-0.5 whitespace-nowrap overflow-hidden text-ellipsis max-w-full">
                                    @name
                                </span>
                            }
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    // Current date used for calendar navigation
    private DateTime CurrentDate = DateTime.Today;

    // List to hold all dates displayed in the calendar grid
    private List<DateTime> CalendarDays = new List<DateTime>();

    // Example data for names on certain days.
    // In a real application, this would be loaded dynamically from a database or service.
    private Dictionary<string, List<string>> DayNames = new Dictionary<string, List<string>>
    {
        { "2025-06-18", new List<string> { "Alice", "Bob" } },
        { "2025-06-21", new List<string> { "Charlie" } },
        { "2025-07-05", new List<string> { "David", "Eve", "Frank" } }
    };

    /// <summary>
    /// Lifecycle method called when the component is initialized.
    /// Used to generate the initial calendar days.
    /// </summary>
    protected override void OnInitialized()
    {
        GenerateCalendarDays();
    }

    /// <summary>
    /// Generates the days for the current month and populates the CalendarDays list.
    /// Includes empty cells for days from previous/next months to align the grid.
    /// </summary>
    private void GenerateCalendarDays()
    {
        CalendarDays.Clear(); // Clear existing days

        // Get the first day of the current month
        var firstDayOfMonth = new DateTime(CurrentDate.Year, CurrentDate.Month, 1);
        // Get the total number of days in the current month
        var daysInMonth = DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month);

        // Determine the day of the week for the first day of the month (0=Sunday, 6=Saturday)
        var startingDayOfWeek = (int)firstDayOfMonth.DayOfWeek;

        // Add placeholder dates (DateTime.MinValue) for days before the first day of the month
        // This ensures the first day of the month aligns correctly in the grid.
        for (int i = 0; i < startingDayOfWeek; i++)
        {
            CalendarDays.Add(DateTime.MinValue);
        }

        // Add all actual days of the current month
        for (int day = 1; day <= daysInMonth; day++)
        {
            CalendarDays.Add(new DateTime(CurrentDate.Year, CurrentDate.Month, day));
        }

        // Add placeholder dates (DateTime.MinValue) for days after the last day of the month
        // This fills out the calendar grid to a full 6 weeks if needed.
        while (CalendarDays.Count % 7 != 0)
        {
            CalendarDays.Add(DateTime.MinValue);
        }
    }

    /// <summary>
    /// Navigates the calendar to the previous month.
    /// </summary>
    private void GoToPreviousMonth()
    {
        CurrentDate = CurrentDate.AddMonths(-1); // Decrement month
        GenerateCalendarDays(); // Re-render calendar for the new month
    }

    /// <summary>
    /// Navigates the calendar to the next month.
    /// </summary>
    private void GoToNextMonth()
    {
        CurrentDate = CurrentDate.AddMonths(1); // Increment month
        GenerateCalendarDays(); // Re-render calendar for the new month
    }

    /// <summary>
    /// Handles the click event for a calendar day.
    /// In a real application, you might open a modal, navigate, or perform other actions.
    /// </summary>
    /// <param name="day">The DateTime object representing the clicked day.</param>
    private void HandleDayClick(DateTime day)
    {
        // Prevent clicks on empty placeholder cells
        if (day == DateTime.MinValue)
        {
            return;
        }

        Console.WriteLine($"Clicked on {day.ToShortDateString()}");
        // Example: You could add a selected date to a list or trigger an event callback.
        // For visual feedback, Blazor will re-evaluate GetDayBoxClasses on state change.
        StateHasChanged(); // Force re-render if visual state changes based on click
    }

    /// <summary>
    /// Determines the CSS classes to apply to each day box based on its state.
    /// </summary>
    /// <param name="day">The DateTime object for the current day box.</param>
    /// <returns>A string of Tailwind CSS classes.</returns>
    private string GetDayBoxClasses(DateTime day)
    {
        // Base classes for all day boxes
        var classes = "calendar-day-box h-28 flex flex-col justify-start items-center text-gray-700 bg-white rounded-lg cursor-pointer hover:bg-blue-50 transition duration-150 ease-in-out border border-gray-200 shadow-sm p-1 md:p-2 relative overflow-hidden";

        if (day == DateTime.MinValue)
        {
            // Classes for empty placeholder cells
            classes = "calendar-day-box h-28 flex items-center justify-center text-gray-400 bg-gray-50 rounded-lg cursor-default border border-gray-200";
        }
        else
        {
            // Check if it's today's date
            if (day.Date == DateTime.Today.Date)
            {
                classes += " bg-blue-100 border-blue-500 text-blue-700 font-semibold relative";
            }
            // You can add more conditions here, e.g., for selected dates, weekend dates, etc.
            if (day.DayOfWeek == DayOfWeek.Saturday || day.DayOfWeek == DayOfWeek.Sunday)
            {
                classes += " text-red-600"; // Example: make weekend days red
            }
        }
        return classes;
    }
}